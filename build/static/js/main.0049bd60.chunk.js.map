{"version":3,"sources":["components/LeftBottomBox/LeftBottomBox.js","App.js","serviceWorker.js","index.js"],"names":["LeftBottomBox","props","onLeftBottomClicked","e","stopPropagation","classes","newClass","state","moved","join","setState","prevState","cssClass","className","this","onClick","Component","App","task2","filteredArr","getNumbers","console","log","multipliedArr","multiplyNumbers","sumNumbers","array","filter","value","map","reduce","accumulator","onClickHandler","alert","showTask2","content","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oSAiCeA,G,kBA3Bb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAQRC,oBAAsB,SAACC,GACrBA,EAAEC,kBAEF,IAAIC,EAAU,CAAC,cACXC,EAAW,EAAKC,MAAMC,MAAQH,EAAQ,GAAK,UAAIA,EAAJ,CAAa,UAASI,KAAK,KAC1E,EAAKC,UAAS,SAACC,EAAUV,GAAX,MAAsB,CACEW,SAAUN,EACVE,OAAQG,EAAUH,WAbxD,EAAKD,MAAQ,CACXK,SAAU,aACVJ,OAAO,GALO,E,sEAqBhB,OACI,yBAAKK,UAAWC,KAAKP,MAAMK,SAAUG,QAASD,KAAKZ,0B,GAxB/Bc,cC0EbC,G,kBAvEb,WAAYhB,GAAO,IAAD,8BAChB,4CAAMA,KAQRiB,MAAQ,WACN,IACIC,EAAc,EAAKC,WADH,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAEnCC,QAAQC,IAAIH,GACZ,IAAII,EAAgB,EAAKC,gBAAgBL,GACzCE,QAAQC,IAAIC,GACZF,QAAQC,IAAI,EAAKG,WAAWF,KAfZ,EAmBlBH,WAAa,SAACM,GACV,OAAOA,EAAMC,QAAO,SAAAC,GAAK,OAAIA,EAAM,GAAKA,EAAM,MApBhC,EAwBlBJ,gBAAkB,SAACE,GACjB,OAAOA,EAAMG,KAAI,SAAAD,GACf,OAAe,GAARA,MA1BO,EA+BlBH,WAAa,SAACC,GACZ,OAAOA,EAAMI,QAAO,SAACC,EAAaH,GAChC,OAAOG,EAAcH,IACpB,IAlCa,EAsClBI,eAAiB,WACfC,MAAM,4BApCN,EAAK1B,MAAQ,CACX2B,WAAW,GAJG,E,sEA0CT,IAAD,OAEFC,EAAUrB,KAAKP,MAAM2B,UAAYpB,KAAKI,QACxC,yBAAKL,UAAU,QAAQE,QAASD,KAAKkB,gBACnC,yBAAKnB,UAAU,WACf,kBAAC,EAAD,MACA,yBAAKA,UAAU,OACX,yBAAKA,UAAU,kBACf,yBAAKA,UAAU,kBACf,yBAAKA,UAAU,mBAEnB,yBAAKA,UAAU,gBACf,yBAAKA,UAAU,yBAKnB,OACE,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMuB,GAAG,IAAIrB,QAAS,WAAM,EAAKL,SAAS,CAACwB,WAAW,MAAtD,UACA,6BACA,kBAAC,IAAD,CAAME,GAAG,IAAIrB,QAAS,WAAM,EAAKL,SAAS,CAACwB,WAAW,IAAQD,MAAM,gCAApE,UACCE,O,GAlEOnB,cCOEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0049bd60.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport  './LeftBottomBox.css';\r\n\r\n\r\nclass LeftBottomBox extends Component{\r\n\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      cssClass: \"leftBottom\",\r\n      moved: false\r\n    }\r\n  }\r\n\r\n  onLeftBottomClicked = (e) => {\r\n    e.stopPropagation();\r\n    \r\n    let classes = [\"leftBottom\"];\r\n    let newClass = this.state.moved ? classes[0] : [...classes, \"moved\"].join(\" \") ;\r\n    this.setState((prevState,props) => ({\r\n                                          cssClass: newClass,\r\n                                          moved: !prevState.moved\r\n                                        }));\r\n  }\r\n\r\n  render(){\r\n    return (\r\n        <div className={this.state.cssClass} onClick={this.onLeftBottomClicked}/>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LeftBottomBox;\r\n","import React, {Component} from 'react';\nimport {HashRouter, Link} from 'react-router-dom';\nimport LeftBottomBox from './components/LeftBottomBox/LeftBottomBox.js';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n      showTask2: false\n    }\n  }\n\n  /* Task 2 */\n  task2 = () => {\n    let originalArray = [3,5,1,9,2,6,7,4];\n    let filteredArr = this.getNumbers(originalArray);\n    console.log(filteredArr);\n    let multipliedArr = this.multiplyNumbers(filteredArr);\n    console.log(multipliedArr);\n    console.log(this.sumNumbers(multipliedArr));\n  }\n\n  /*Task 2 - returns values between 4 and 8 */\n  getNumbers = (array) => {\n      return array.filter(value => value>4 && value<8);\n  }\n\n  /*Task 2 - multiplies values in array by 10 */\n  multiplyNumbers = (array) => {\n    return array.map(value => {\n      return value * 10;\n    });\n  }\n\n  /*Task 2 - sums values in array */\n  sumNumbers = (array) => {\n    return array.reduce((accumulator, value) =>{\n      return accumulator + value;\n    }, 0);\n  }\n\n\n  onClickHandler = () => {\n    alert(\"click only on inner div\");\n  }\n\n  render(){\n\n    let content = this.state.showTask2 ? this.task2() : (\n      <div className=\"outer\" onClick={this.onClickHandler}>\n        <div className=\"center\"/>\n        <LeftBottomBox />\n        <div className=\"row\">\n            <div className=\"box float-box\"/>\n            <div className=\"box float-box\"/>\n            <div className=\"box float-box\"/>\n        </div>\n        <div className=\"new-row box\"/>\n        <div className=\"absolute-center box\"/>\n      </div>\n    );\n  //  this.task2();\n\n    return (\n      <HashRouter>\n          <Link to=\"/\" onClick={()=> {this.setState({showTask2: false});}}>Task 1</Link>\n          <br/>\n          <Link to=\"/\" onClick={()=> {this.setState({showTask2: true}); alert(\"open console to see task 2\");}}>Task 2</Link>\n          {content}\n      </HashRouter>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}